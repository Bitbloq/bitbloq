# import Date, ObjectID, Role from "./scalars.graphql"
# import Exercise from "./exercise.graphql"
# import Folder from "./folder.graphql"
# import File, Resource from "./upload.graphql"
# import Upload from "./scalars.graphql"

directive @authRequired(requires: [Role] = [ADMIN]) on QUERY | FIELD

type Query {
  documents: [Document] @authRequired(requires: [USER])
  document(id: ObjectID!): Document @authRequired(requires: [USER])
  documentsAndFolders(
    currentLocation: ObjectID
    currentPage: Number
    itemsPerPage: Number
    order: String
    searchTitle: String
  ): DocsAndFolders @authRequired(requires: [USER])
  hasExercises(id: ObjectID!, type: String): Boolean
    @authRequired(requires: [USER])
  openPublicDocument(id: ObjectID!): Document # @authRequired(requires: [BASIC])
  examples: [Document]
}
type Mutation {
  createDocument(input: DocumentIn!): Document @authRequired(requires: [USER])
  deleteDocument(id: ObjectID!): Document @authRequired(requires: [USER])
  duplicateDocument(
    currentLocation: ObjectID
    documentID: ObjectID!
    itemsPerPage: Number
    order: String
    searchTitle: String
    title: String!
  ): DuplicateDocument @authRequired(requires: [USER])
  updateDocument(id: ObjectID!, input: DocumentIn): Document
    @authRequired(requires: [USER])
  setDocumentImage(id: ObjectID, image: Upload, isSnapshot: Boolean): Document
    @authRequired(requires: [USER])
  updateDocumentContent(
    id: ObjectID
    content: String
    cache: String
    advancedMode: Boolean
  ): Document @authRequired(requires: [USER])
  publishDocument(id: ObjectID!, public: Boolean, example: Boolean): Document
    @authRequired(requires: [PUBLISHER])
}
type Subscription {
  documentUpdated: Document @authRequired(requires: [USER])
}

type DocImage {
  image: String
  isSnapshot: Boolean
}

type DocsAndFolders {
  result: [Result]
  pagesNumber: Number
  nFolders: Number
  parentsPath: [Folder]
}

type Result {
  id: ObjectID
  title: String
  image: String
  type: String
  createdAt: Date
  updatedAt: Date
  parent: ObjectID
}

type Document {
  id: ObjectID
  user: ObjectID
  title: String!
  type: String
  folder: ObjectID
  content: String
  advancedMode: Boolean
  cache: String
  description: String
  version: String
  image: DocImage
  public: Boolean
  example: Boolean
  createdAt: Date
  updatedAt: Date
  exercises: [Exercise]
  images: [File]
  parentsPath: [Folder]
  resources: [Resource]
  exercisesResources: [Resource]
}

type DuplicateDocument {
  document: Document
  page: Number
}

input DocImageIn {
  image: String
  isSnapshot: Boolean
}

input DocumentIn {
  user: ObjectID
  title: String
  type: String
  folder: ObjectID
  content: String
  advancedMode: Boolean
  cache: String
  description: String
  version: String
  image: DocImageIn
}
